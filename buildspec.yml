version: 0.2

env:
  variables:
    # Disable call to checkpoint.hashicorp.com to look for new versions of Packer.
    CHECKPOINT_DISABLE: 1
    PACKER_NO_COLOR: 1
  parameter-store:
    # Put this secret into a secure variable.
    BIND_PASS: /techops/ansible_vars/common/bind_pass

phases:
  pre_build:
    commands:
      - echo "Installing Packer"
      - curl -o packer.zip https://releases.hashicorp.com/packer/1.2.2/packer_1.2.2_linux_amd64.zip && unzip packer.zip
      - echo "Validating Packer template"
      - ./packer validate packer_cis.json
  build:
    commands:
      # If only there was a better way...
      # Packer calls ansible with a packer-to-ansible passthrough variable. See packer JSON template for how it is used;
      # Declare it as a packer variable,
      # variables: { "bind_pass": "", ...
      # ...and then pass it like so:
      #         "extra_arguments": [ "--extra-vars \"sssd_ldap_default_authtok={{user `bind_pass`}}\"" ]
      - ./packer build -color=false -var bind_pass=$BIND_PASS packer_cis.json | tee build.log
      - ./packer build -var bind_pass=$BIND_PASS packer_cis.json | tee build.log
  post_build:
    commands:
      - egrep "${AWS_REGION}\:\sami\-" build.log | cut -d' ' -f2 > ami_id.txt
      # Packer doesn't return non-zero status; we must do that if Packer build failed
      - test -s ami_id.txt || exit 1
      - sed -i.bak "s/<<AMI-ID>>/$(cat ami_id.txt)/g" ami_builder_event.json
      - aws events put-events --entries file://ami_builder_event.json
      - echo "build completed on `date`"
artifacts:
  files:
    - ami_builder_event.json
    - build.log
  discard-paths: yes
