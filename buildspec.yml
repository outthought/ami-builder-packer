# This file configures AWS CodeBuild.
version: 0.2

env:
  variables:
    # Disable call to checkpoint.hashicorp.com to look for new versions of Packer.
    CHECKPOINT_DISABLE: 1
    PACKER_NO_COLOR: 1
    # PACKER_LOG: 1
    ANSIBLE_STDOUT_CALLBACK: debug
  parameter-store:
    # Put secret Ansible vars into a JSON-string SSM Parameter Store SecureString.
    GROUP_VARS: /techops/ansible_vars/common/group_vars
    # Enable git clone with a GitHub OAuth Token fetched from SSM Parameter Store.
    GITHUB_TOKEN: /techops/cloud-engineering/account-standup/accountconfig.githuboauthtoken

phases:
  install:
    commands:
      - echo "Installing Packer"
      - curl -o packer.zip https://releases.hashicorp.com/packer/1.2.4/packer_1.2.4_linux_amd64.zip && unzip packer.zip
      - echo "Installing git"
      - yum install -y git
  pre_build:
    commands:
      - mkdir -p ansible/{group_vars,roles}
      - echo "Place ansible parameters into group_vars/all"
      - echo "$GROUP_VARS" > ansible/group_vars/all
      - echo "Directly clone all repos for ansible roles here."
      # Pass this in as parameters a custom requirements.yml for ansible-galxy, somehow...
      # Alternatively, build a zip and pull from S3.
      # Public roles are contained in the ansible/requirements.yml file and installed by packer.
      # These roles are all within private GitHub repositorys in the SPSCommerce organization.
      - awk '{ system("git clone -nq --depth 1 --branch " $1 " https://$GITHUB_TOKEN@github.com/" $2 " ansible/roles") }' gitrepos
      - echo "Validating Packer template"
      - ./packer validate packer.json
  build:          
    commands:
      - ./packer build packer.json | tee build.log
      # - ./packer build -debug packer.json | tee build.log
  post_build:
    commands:
      - egrep "${AWS_REGION}\:\sami\-" build.log | cut -d' ' -f2 | tr '\n' ' ' > ami_id.txt
      # Packer doesn't return non-zero status; we must do that if Packer build failed
      - test -s ami_id.txt || exit 1
      - sed -i.bak "s/<<AMI-ID>>/$(cat ami_id.txt)/g" ami_builder_event.json
      - aws events put-events --entries file://ami_builder_event.json
      - echo "build completed on `date`"
artifacts:
  files:
    - ami_builder_event.json
    - build.log
  discard-paths: yes
