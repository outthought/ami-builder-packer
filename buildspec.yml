# This file configures AWS CodeBuild.
version: 0.2

env:
  variables:
    # Disable call to checkpoint.hashicorp.com to look for new versions of Packer.
    CHECKPOINT_DISABLE: 1
    PACKER_NO_COLOR: 1
    # PACKER_LOG: 1
    ANSIBLE_STDOUT_CALLBACK: debug
  parameter-store:
    # Put secret Ansible vars into a JSON-string SSM Parameter Store SecureString.
    GROUP_VARS: /techops/ansible_vars/common/group_vars
    # Enable git clone with a GitHub OAuth Token fetched from SSM Parameter Store.
    GITHUB_TOKEN: /techops/cloud-engineering/account-standup/accountconfig.githuboauthtoken

phases:
  install:
    commands:
      - echo "Installing Packer"
      - curl -o packer.zip https://releases.hashicorp.com/packer/1.2.4/packer_1.2.4_linux_amd64.zip && unzip packer.zip
      - yum install -y git jq aws-cli
  pre_build:
    commands:
      - mkdir -p ansible/group_vars
      - echo "Place ansible parameters into group_vars/all"
      - echo "$GROUP_VARS" > ansible/group_vars/all
      - echo "Directly clone private repos for ansible roles."
      - cd ansible/roles
      # Public roles in ansible/requirements.yml are installed by packer.
      # Private roles within private GitHub SPSCommerce organization
      # require permission, and are read from file gitrepos as follows:
      - |
        cat gitrepos | while read repo version
        do
          git clone -n --depth 1 https://$GITHUB_TOKEN@github.com/SPSCommerce/$repo.git --branch $version
        done
      - cd ../..
      - echo "Validating Packer template"
      - ./packer validate packer.json
  build:          
    commands:
      - ./packer build packer.json | tee build.log
      # - ./packer build -debug packer.json | tee build.log
  post_build:
    commands:
      # Packer doesn't return non-zero status; exit if Packer provisioner failed
      - test -s manifest.json || exit 1
      - echo "build completed on `date`"
      - echo "Send CloudWatch events for each ami in file we populate from Packer manifest in post-processor."
      - while read line; do aws events put-events --entries "$line"; done < events.json
      - echo "Put ssm parameter for each ami in file we populate from Packer manifest in post-processor."
      - while read line; do aws ssm put-parameter --cli-input-json "$line"; done < ssm.json
artifacts:
  files:
    - events.json
    - ssm.json
    - build.log
    - manifest.json
  discard-paths: yes
